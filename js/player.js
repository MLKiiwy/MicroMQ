// Generated by CoffeeScript 1.3.3
(function() {
  var Answer, Binding, Design, Question, Quizz, Rules, Scenario, Screen, Url, XmlWrapper, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  XmlWrapper = (function() {

    function XmlWrapper(xml, name, number) {
      var _ref, _ref1;
      this.xml = xml;
      this.name = name;
      this.number = number;
      if ((_ref = this.name) == null) {
        this.name = 'node';
      }
      if ((_ref1 = this.number) == null) {
        this.number = 1;
      }
      this.id = this.name + this.number;
    }

    return XmlWrapper;

  })();

  Quizz = (function(_super) {

    __extends(Quizz, _super);

    function Quizz(xml) {
      var questions;
      Quizz.__super__.constructor.call(this, xml, 'quizz');
      this.label = this.xml.find('> mq\\:label').text();
      this.description = this.xml.find('> mq\\:description').text();
      this.background = this.xml.find('> mq\\:background').attr('url');
      questions = [];
      this.xml.find('mq\\:question').each(function() {
        return questions.push(new Question($(this)));
      });
      this.questions = questions;
      this.totalQuestions = this.questions.length;
    }

    return Quizz;

  })(XmlWrapper);

  Question = (function(_super) {

    __extends(Question, _super);

    function Question(xml) {
      var answers, i;
      Question.__super__.constructor.call(this, xml, 'question');
      this.answersGiven = null;
      this.label = this.xml.find('> mq\\:label').text();
      answers = [];
      i = 1;
      this.xml.find('mq\\:answer').each(function() {
        return answers.push(new Answer($(this), i++));
      });
      this.answers = answers;
    }

    Question.prototype.setAnswers = function(answers) {
      var answerGiven, _i, _len, _ref, _results;
      this.answersGiven = answers;
      _ref = this.answersGiven;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answerGiven = _ref[_i];
        _results.push((function(answerGiven, answers) {
          var answer, _j, _len1, _ref1, _results1;
          this.answers = answers;
          _ref1 = this.answers;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            answer = _ref1[_j];
            if (answerGiven === answer.value) {
              _results1.push(answer.selected = true);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })(answerGiven, this.answers));
      }
      return _results;
    };

    return Question;

  })(XmlWrapper);

  Answer = (function(_super) {

    __extends(Answer, _super);

    function Answer(xml, n) {
      var _ref;
      Answer.__super__.constructor.call(this, xml, 'answer', n);
      this.label = this.xml.find('> mq\\:label').text();
      this.value = this.xml.attr('value');
      if ((_ref = this.value) == null) {
        this.value = this.label;
      }
      this.selected = false;
      this.right = (this.xml.attr('right') != null) && this.xml.attr('right') === 'true';
    }

    Answer.prototype.isGood = function() {
      return this.selected === true && this.right;
    };

    Answer.prototype.isWrong = function() {
      return this.selected === true && !this.right;
    };

    return Answer;

  })(XmlWrapper);

  Scenario = (function(_super) {

    __extends(Scenario, _super);

    function Scenario(xml) {
      var i, screens;
      Scenario.__super__.constructor.call(this, xml, 'scenario');
      screens = {};
      i = 1;
      this.xml.find('mq\\:screen').each(function() {
        var screen;
        screen = new Screen($(this), i++);
        return screens[screen.id] = screen;
      });
      this.screens = screens;
      this.allowBackground = this.xml.find('mq\\:screens').attr('allowBackground') === 'true';
      this.cssGlobalClass = this.xml.find('mq\\:screens').attr('cssGlobalClass');
    }

    return Scenario;

  })(XmlWrapper);

  Binding = (function() {

    function Binding() {}

    return Binding;

  })();

  Rules = (function() {

    function Rules() {}

    return Rules;

  })();

  Screen = (function(_super) {

    __extends(Screen, _super);

    function Screen(xml, n) {
      var id;
      id = xml.attr('id');
      if (id == null) {
        id = 'screen' + n;
      }
      Screen.__super__.constructor.call(this, xml, 'screen', n);
      this.id = id;
      this.nextClass = this.xml.attr('next') != null ? this.xml.attr('next') : 'mq-next';
      this.validClass = this.xml.attr('valid') != null ? this.xml.attr('valid') : 'mq-valid';
      this.answerClass = this.xml.attr('answers') != null ? this.xml.attr('answers') : 'answers';
      this.type = this.xml.attr('type');
    }

    Screen.prototype.data = function(data) {
      this.data = data;
    };

    Screen.prototype.render = function(node) {
      var render;
      this.node = node;
      render = $.jqote(this.xml, this.data);
      return this.node.append(render);
    };

    Screen.prototype.bind = function(type, func) {
      switch (type) {
        case "next":
          return this.node.find('.' + this.nextClass).on('click', func);
        case "valid":
          return this.node.find('.' + this.validClass).on('click', func);
      }
    };

    Screen.prototype.remove = function() {
      return this.node.html('');
    };

    Screen.prototype.getAnswers = function() {
      var val;
      val = this.node.find('.' + this.answerClass + ':checked').val();
      if ((val != null) && typeof val === 'string') {
        val = [val];
      } else {
        val = [];
      }
      return val;
    };

    Screen.prototype.background = function(globalBack) {
      var css;
      if (globalBack && globalBack.length > 0) {
        css = 'background-image:url(\'' + globalBack + '\')';
      } else {
        css = '';
      }
      return this.node.attr('style', css);
    };

    return Screen;

  })(XmlWrapper);

  Design = (function(_super) {

    __extends(Design, _super);

    function Design(xml) {
      Design.__super__.constructor.call(this, xml, 'design');
    }

    Design.prototype.active = function() {
      var body;
      body = $('body');
      return this.xml.find('mq\\:css').each(function() {
        var newCss;
        newCss = '<link rel="stylesheet" type="text/css" href="' + Url.build($(this).attr('url')) + '" media="screen" />';
        return body.append(newCss);
      });
    };

    return Design;

  })(XmlWrapper);

  Url = (function() {

    function Url() {}

    Url.init = function(path) {
      return this.path = path;
    };

    Url.build = function(path) {
      return this.path + '/' + path;
    };

    return Url;

  })();

  root.Player = (function() {

    function Player(target) {
      this.target = target;
      this.init();
    }

    Player.prototype.init = function() {
      this.node = $(this.target);
      this.quizz = null;
      this.scenario = null;
      this.design = null;
      this.running = false;
      this.currentScreen = null;
      this.currentQuestionNumber = -1;
      return this.answers = {};
    };

    Player.prototype.load = function(url) {
      var urlParts,
        _this = this;
      this.url = url;
      urlParts = this.url.split('/');
      urlParts.pop();
      Url.init(urlParts.join('/'));
      return $.ajax(this.url, {
        type: 'GET',
        dataType: 'xml',
        error: function(jqXHR, textStatus, errorThrown) {
          return _this._onLoadError(jqXHR, textStatus, errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          return _this._onLoadSuccess(data, textStatus, jqXHR);
        }
      });
    };

    Player.prototype._onLoadError = function(jqXHR, textStatus, errorThrown) {
      return alert('error loading ' + this.url);
    };

    Player.prototype._onLoadSuccess = function(data, textStatus, jqXHR) {
      if (this.data && this.running) {
        this._reset();
      }
      this.quizz = new Quizz($(data).find('mq\\:quizz'));
      this.scenario = new Scenario($(data).find('mq\\:scenario'));
      this.design = new Design($(data).find('mq\\:design'));
      if (this.running) {
        return this._doRun();
      }
    };

    Player.prototype.run = function() {
      if (this.running) {

      } else {
        this.running = true;
        if (this.quizz) {
          return this._doRun();
        }
      }
    };

    Player.prototype.next = function() {
      var screenId, screenType;
      screenType = null;
      if (this.currentScreen != null) {
        screenType = this.currentScreen.type;
      }
      switch (screenType) {
        case null:
          return this._setScreen(this.scenario.screens['start'], this.quizz);
        case 'start':
        case 'question':
        case 'answer':
          if (this.currentQuestionNumber === (this.quizz.totalQuestions - 1)) {
            return this._setScreen(this.scenario.screens['end'], this.quizz);
          } else {
            screenId = 'question';
            this.currentQuestionNumber++;
            return this._setScreen(this.scenario.screens[screenId], this.quizz.questions[this.currentQuestionNumber]);
          }
          break;
        case 'end':
          return alert('fin');
      }
    };

    Player.prototype._doRun = function() {
      this.design.active();
      if (this.scenario.cssGlobalClass !== null) {
        this.node.addClass(this.scenario.cssGlobalClass);
      }
      return this.next();
    };

    Player.prototype._setScreen = function(screen, data) {
      var _this = this;
      if (this.currentScreen != null) {
        this.currentScreen.remove();
      }
      this.currentScreen = screen;
      screen.data(data);
      screen.render(this.node);
      screen.background(this.quizz.background);
      screen.bind('next', function() {
        return _this._onNextClick();
      });
      return screen.bind('valid', function() {
        return _this._onValidClick();
      });
    };

    Player.prototype._onNextClick = function() {
      return this.next();
    };

    Player.prototype._onValidClick = function() {
      var question, screenId;
      this._saveAnswer();
      screenId = 'answer';
      question = this.quizz.questions[this.currentQuestionNumber];
      question.setAnswers(this.answers[this.currentQuestionNumber]);
      return this._setScreen(this.scenario.screens[screenId], question);
    };

    Player.prototype._saveAnswer = function() {
      return this.answers[this.currentQuestionNumber] = this.currentScreen.getAnswers();
    };

    Player.prototype._doStop = function() {
      return this.running = false;
    };

    Player.prototype._doReset = function() {
      this._doStop();
      return this.data = null;
    };

    return Player;

  })();

}).call(this);
